(set-option :smt.arith.solver 6)
(declare-const v0 Bool)
(declare-const v1 Bool)
(declare-const v2 Bool)
(declare-const v3 Bool)
(declare-const v4 Bool)
(declare-const v5 Bool)
(declare-const i0 Int)
(declare-const i1 Int)
(declare-const i3 Int)
(declare-const i4 Int)
(declare-const i5 Int)
(declare-const i9 Int)
(assert v0)
(declare-const v6 Bool)
(declare-const v7 Bool)
(assert (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0))
(assert (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5))
(declare-const v8 Bool)
(declare-const v9 Bool)
(declare-const i10 Int)
(declare-const v10 Bool)
(assert (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))
(assert v10)
(declare-const i11 Int)
(assert v0)
(declare-const v11 Bool)
(assert (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5))
(check-sat)
(assert v8)
(push 1)
(declare-const v12 Bool)
(declare-const v13 Bool)
(assert (and v9 v0 (=> v8 (<= (div i1 (abs 8)) i5)) (distinct 682 26) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v6 v12 v9 v9 v11))
(assert v0)
(declare-const v14 Bool)
(assert v4)
(assert (xor v13 v5 v5 v13 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) (= i0 i0) v10 (=> v1 v8) v6 v1 (= i0 i0)))
(assert (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))
(declare-const i12 Int)
(assert (= (< i0 i10) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v12 v1 v1 (= (abs 8) i3)))
(assert (xor v6 (= (< i0 i10) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v12 v1 v1 (= (abs 8) i3)) (= (< i0 i10) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v12 v1 v1 (= (abs 8) i3)) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) (and v9 v12 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v5 v6 (= i0 i0)) v8 (and v9 v12 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v5 v6 (= i0 i0))))
(declare-const v15 Bool)
(assert v3)
(declare-const v16 Bool)
(assert (> 955 i1))
(check-sat)
(assert (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5))
(declare-const v17 Bool)
(declare-const v18 Bool)
(declare-const v19 Bool)
(assert (not (distinct 682 26)))
(assert (xor v0 (xor v13 v5 v5 v13 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) (= i0 i0) v10 (=> v1 v8) v6 v1 (= i0 i0))))
(pop 1)
(assert (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))
(push 1)
(declare-const v20 Bool)
(declare-const v21 Bool)
(declare-const v22 Bool)
(declare-const i13 Int)
(assert v4)
(pop 1)
(declare-const v23 Bool)
(push 1)
(assert (xor v9 v8 v1))
(declare-const i14 Int)
(declare-const i15 Int)
(pop 1)
(declare-const i16 Int)
(declare-const v24 Bool)
(assert v23)
(declare-const v25 Bool)
(assert v11)
(declare-const i17 Int)
(assert (distinct 592 i5))
(declare-const v26 Bool)
(declare-const i18 Int)
(assert (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))
(declare-const v27 Bool)
(assert (= i0 i0))
(declare-const v28 Bool)
(assert (< i0 i10))
(declare-const v29 Bool)
(assert (not v6))
(assert (not (distinct 682 26)))
(declare-const i19 Int)
(declare-const v30 Bool)
(declare-const v31 Bool)
(assert (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)))
(push 1)
(declare-const v32 Bool)
(declare-const v33 Bool)
(declare-const v34 Bool)
(declare-const i20 Int)
(check-sat)
(assert (< i0 i10))
(assert v33)
(declare-const v35 Bool)
(push 1)
(declare-const v36 Bool)
(assert (= v8 (>= (mod 972 51) 682) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) (>= (mod 972 51) 682) (= i0 i0) v31 v32))
(check-sat)
(push 1)
(declare-const i21 Int)
(declare-const v37 Bool)
(assert (=> v5 (= i0 i0)))
(push 1)
(assert (or (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v10))
(pop 1)
(declare-const v38 Bool)
(assert (and v1 v24))
(pop 1)
(assert (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)))
(declare-const v39 Bool)
(declare-const v40 Bool)
(pop 1)
(assert (= (=> v1 v8) v30 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (=> v5 (= i0 i0)) v23 v1 (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) (not v25) v5 (<= 327 i4) (<= (div i1 (abs 8)) i5)))
(declare-const v41 Bool)
(assert (or (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v29 (distinct (- i0) 592)))
(declare-const v42 Bool)
(assert v33)
(pop 1)
(push 1)
(declare-const v43 Bool)
(declare-const v44 Bool)
(assert (>= (mod 972 51) 682))
(push 1)
(declare-const v45 Bool)
(declare-const i22 Int)
(declare-const i23 Int)
(assert (= (=> v8 (<= (div i1 (abs 8)) i5)) v25))
(assert (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0))
(declare-const v46 Bool)
(assert (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)))
(declare-const v47 Bool)
(push 1)
(declare-const v48 Bool)
(assert (> (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26) (+ (- i0) i0)))
(declare-const v49 Bool)
(declare-const i24 Int)
(assert v29)
(check-sat)
(push 1)
(declare-const i25 Int)
(pop 1)
(declare-const v50 Bool)
(declare-const i26 Int)
(assert (=> (=> v8 (<= (div i1 (abs 8)) i5)) (=> v5 (= i0 i0))))
(pop 1)
(assert (or v9 v2 v28 v5 v29))
(declare-const v51 Bool)
(push 1)
(declare-const v52 Bool)
(declare-const v53 Bool)
(declare-const v54 Bool)
(assert (< i0 i10))
(assert v45)
(check-sat)
(declare-const v55 Bool)
(declare-const v56 Bool)
(assert (xor v53 (not v6) v27 (< i0 i10) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (distinct (+ (abs 8) i5 26 327) 682)))
(declare-const i27 Int)
(pop 1)
(assert (=> v46 v24))
(declare-const v57 Bool)
(pop 1)
(declare-const v58 Bool)
(pop 1)
(assert v1)
(assert (distinct (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v28 v31 v28 (< i0 i10) v29))
(check-sat)
(declare-const v59 Bool)
(declare-const i28 Int)
(assert (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)))
(declare-const i29 Int)
(declare-const v60 Bool)
(assert (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59))
(push 1)
(declare-const v61 Bool)
(declare-const i30 Int)
(assert (=> v60 (<= 327 i4)))
(assert (distinct (>= (mod 972 51) 682) (= (abs 8) i3) (not (distinct 682 26)) v4 (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) (= (abs 8) i3)))
(declare-const v62 Bool)
(assert (and v5 (=> v60 (<= 327 i4)) (<= i0 (+ (- i0) i0))))
(assert (= (distinct 682 26) (>= (mod 972 51) 682) (=> v8 (<= (div i1 (abs 8)) i5)) v10 (= 327 (- (+ (abs 8) i5 26 327))) (=> v5 (= i0 i0))))
(declare-const v63 Bool)
(declare-const v64 Bool)
(assert (xor (distinct (+ (abs 8) i5 26 327) 682) v28 v30 (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59) (= 592 i18) (not (distinct 682 26)) v24 (= (abs 8) i3) v63 (<= (div i1 (abs 8)) i5) (distinct (div i1 (abs 8)) 327)))
(declare-const v65 Bool)
(assert v65)
(assert (not v6))
(assert (=> (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) v30))
(declare-const v66 Bool)
(assert (not (>= (- i30 116 (mod 972 51) (- i0)) (abs (mod 972 51)))))
(declare-const v67 Bool)
(pop 1)
(push 1)
(assert (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)))
(declare-const v68 Bool)
(declare-const v69 Bool)
(assert (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)))
(declare-const v70 Bool)
(assert (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))
(declare-const i31 Int)
(pop 1)
(declare-const v71 Bool)
(assert (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))))
(push 1)
(assert (distinct (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v28 v31 v28 (< i0 i10) v29))
(declare-const v72 Bool)
(assert (not (= 327 (- (+ (abs 8) i5 26 327)))))
(check-sat)
(assert (=> (= 327 (- (+ (abs 8) i5 26 327))) v7))
(check-sat)
(declare-const v73 Bool)
(assert (xor v24 v4 (> i3 (mod (- 24 972) 8)) (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59)))
(check-sat)
(declare-const v74 Bool)
(check-sat)
(declare-const v75 Bool)
(assert (or (>= (mod 972 51) 682) (> 116 (mod 8 (+ (- i0) i0))) (=> (= (abs 8) i3) (<= i0 (+ (- i0) i0))) (distinct 682 26) (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) (<= i16 735) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v74 v7 (> 24 (* i1 217 i10))))
(assert (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))
(pop 1)
(declare-const v76 Bool)
(assert (not v6))
(declare-const i32 Int)
(declare-const v77 Bool)
(declare-const v78 Bool)
(declare-const i33 Int)
(assert v30)
(declare-const v79 Bool)
(declare-const v80 Bool)
(declare-const v81 Bool)
(assert (=> v30 (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26))))
(declare-const v82 Bool)
(declare-const v83 Bool)
(assert (xor v24 (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v24 v31 (=> v5 (= i0 i0)) (>= (mod 972 51) 682)))
(declare-const v84 Bool)
(assert (not (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11)))))
(declare-const v85 Bool)
(assert (xor v26 (>= (mod 972 51) 682) (=> v8 (<= (div i1 (abs 8)) i5)) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (> i3 (mod (- 24 972) 8)) v26 v0 (distinct (+ (abs 8) (abs (mod 972 51)) 217) 955)))
(declare-const v86 Bool)
(assert v5)
(declare-const v87 Bool)
(assert (= v27 (= (abs 8) i3) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))) (< i0 i10) (distinct (+ (abs 8) i5 26 327) 682)))
(declare-const i34 Int)
(declare-const v88 Bool)
(assert (not (=> v1 v8)))
(assert (=> v5 (= i0 i0)))
(declare-const v89 Bool)
(assert (distinct 682 26))
(declare-const v90 Bool)
(push 1)
(assert (or (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59) (not (=> v1 v8)) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (<= 327 i4) (not (=> v1 v8)) (= v27 (= (abs 8) i3) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))) (< i0 i10) (distinct (+ (abs 8) i5 26 327) 682)) (<= (div i1 (abs 8)) i5) (>= (+ (- i0) i0) 592) (or (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)) v2 (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) v4)))
(assert (xor v59 (=> v8 (<= (div i1 (abs 8)) i5)) (<= i18 8) (not (=> v1 v8)) v78 (distinct (div i1 (abs 8)) (+ (abs 8) i5 26 327)) v10 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v8))
(check-sat)
(declare-const i35 Int)
(push 1)
(assert v88)
(declare-const v91 Bool)
(assert v82)
(assert (xor v89 v83 (=> (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) (xor v24 (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v24 v31 (=> v5 (= i0 i0)) (>= (mod 972 51) 682))) v10 v89 (= (not (distinct 682 26)) v28 (not (distinct 682 26)) (distinct (not (distinct 682 26)) (> 972 735) (< 734 i29)) v29 (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59) (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v2) (distinct (distinct (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v28 v31 v28 (< i0 i10) v29) (and (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) (>= (+ (- i0) i0) 592) (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v0 v3 v30 (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v60 (>= i11 8)) (>= i11 8) (=> v8 (<= (div i1 (abs 8)) i5)) (=> v8 (<= (div i1 (abs 8)) i5)) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (< i0 i10) v5 v28 (=> v1 v8) (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11)))))
(declare-const v92 Bool)
(assert (or (not (=> v1 v8)) (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))))
(assert v9)
(declare-const v93 Bool)
(assert v92)
(push 1)
(declare-const v94 Bool)
(pop 1)
(declare-const v95 Bool)
(assert (= (not (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11)))) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11) v91))
(push 1)
(pop 1)
(assert v3)
(pop 1)
(declare-const v96 Bool)
(assert (= (=> v1 v8) (< i0 i10) (= (distinct (+ (abs 8) (abs (mod 972 51)) 217) 955) v88 (=> (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) (>= i11 8)) v25 v86 (and (=> v5 (= i0 i0)) (= i0 i0) (= i0 i0) (= (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v24 v1 (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))) v25) (distinct (+ (abs 8) i5 26 327) 682) (distinct 682 26) v6 (<= (- i0) (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) (> 972 735) (< i0 i10) v59) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (< i0 i10)) (= (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) v5 (distinct (+ (abs 8) i5 26 327) 682) (=> v1 v8) (xor v24 (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v24 v31 (=> v5 (= i0 i0)) (>= (mod 972 51) 682)) (= v27 (= (abs 8) i3) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))) (< i0 i10) (distinct (+ (abs 8) i5 26 327) 682)) (>= (mod 972 51) 682) v10) v2 (not (=> v1 v8))))
(assert (=> (= 327 (- (+ (abs 8) i5 26 327))) (= v11 (= v27 (= (abs 8) i3) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))) (< i0 i10) (distinct (+ (abs 8) i5 26 327) 682)) (not v6) (not v79) (distinct (not (distinct 682 26)) (> 972 735) (< 734 i29)) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (distinct (<= (mod 8 (+ (- i0) i0)) 735) v27 v31 (distinct (not (distinct 682 26)) (> 972 735) (< 734 i29)) (> i1 (abs (mod 972 51))) v83) v28 v80)))
(declare-const v97 Bool)
(assert (> 972 735))
(push 1)
(assert (and v26 v82 v1 (or v83 v24 v2 (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) v78 (=> v30 (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26))) (> 972 735) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))))) (distinct (- i0) 592) v78 (=> v8 (<= (div i1 (abs 8)) i5)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)))
(pop 1)
(assert (= (> i1 (abs (mod 972 51))) (< 542 i17) (distinct (div i1 (abs 8)) (+ (abs 8) i5 26 327)) (distinct (<= (mod 8 (+ (- i0) i0)) 735) v27 v31 (distinct (not (distinct 682 26)) (> 972 735) (< 734 i29)) (> i1 (abs (mod 972 51))) v83) v29 (=> v30 (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26))) v76 v77 v11 (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7)))
(declare-const v98 Bool)
(declare-const v99 Bool)
(pop 1)
(declare-const v100 Bool)
(assert (>= (- 592 116 682 51) 24))
(declare-const v101 Bool)
(declare-const v102 Bool)
(assert (distinct v31 (distinct (+ (abs 8) i5 26 327) 682) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) v11 (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) v90 (distinct 682 26)))
(declare-const v103 Bool)
(push 1)
(declare-const v104 Bool)
(assert (=> v10 v80))
(declare-const v105 Bool)
(assert (not v79))
(declare-const v106 Bool)
(push 1)
(assert (not (distinct 682 26)))
(declare-const v107 Bool)
(declare-const i36 Int)
(assert (or (= (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26)) v5 (distinct (+ (abs 8) i5 26 327) 682) (=> v1 v8) (xor v24 (xor (not (distinct 682 26)) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (>= i11 8) (>= (+ (- i0) i0) 592) (= i0 i0)) v24 v31 (=> v5 (= i0 i0)) (>= (mod 972 51) 682)) (= v27 (= (abs 8) i3) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3)))) (< i0 i10) (distinct (+ (abs 8) i5 26 327) 682)) (>= (mod 972 51) 682) v10) v3 (distinct (+ (abs 8) (abs (mod 972 51)) 217) 955) (or v83 v24 v2 (distinct v28 v5 (distinct (- i0) 592) (=> v5 (= i0 i0)) (not (distinct 682 26)) (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0)) v78 (=> v30 (distinct 735 (* i10 (mod 8 (+ (- i0) i0)) (div i1 (abs 8)) i0 26))) (> 972 735) (or v23 v3 v27 v31 v27 (=> v5 (= i0 i0)) (= (distinct 592 i5) (>= (mod 972 51) 682) v5 (distinct (- i0) 592) (not (distinct 682 26)) (>= (+ (- i0) i0) 592)) v7) (= v9 (distinct 682 26) v5 (distinct v10 (< i0 i10) v2 (distinct 592 i5) (or (= (abs 8) i3) v6 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v10 (= (abs 8) i3) v0 (= (abs 8) i3))))) v81 (> i1 682) v82 (xor v26 (>= (mod 972 51) 682) (=> v8 (<= (div i1 (abs 8)) i5)) (=> v9 (or v1 (>= (mod 972 51) 682) v27 v10 v24 v26 v24 (>= i11 8) (and (=> v8 (<= (div i1 (abs 8)) i5)) v0 v8 (or v0 (or (= (abs 8) i3) v6 (= (abs 8) i3) v7 v5 v1 v4 v1 (= (abs 8) i3) v5) v6 (= (abs 8) i3) v0) v11))) (> i3 (mod (- 24 972) 8)) v26 v0 (distinct (+ (abs 8) (abs (mod 972 51)) 217) 955)) (distinct (+ (abs 8) (abs (mod 972 51)) 217) 955) (<= (div i5 499) 804) v31))
(check-sat)
(exit)
