(set-logic QF_AUFBV)
(declare-fun bvlambda_1_ () (_ BitVec 1))
(declare-fun bvlambda_2_ () (_ BitVec 8))
(declare-fun bvlambda_3_ () (_ BitVec 1))
(declare-fun bvlambda_4_ () (_ BitVec 2))
(declare-fun a15 () (Array (_ BitVec 11) (_ BitVec 3)))
(declare-fun a16 () (Array (_ BitVec 15) (_ BitVec 9)))
(declare-fun a17 () (Array (_ BitVec 1) (_ BitVec 10)))
(declare-fun a18 () (Array (_ BitVec 9) (_ BitVec 4)))
(assert
(let (($e1 (_ bv0 1)))
(let (($e2 (_ bv2 9)))
(let (($e3 (_ bv0 8)))
(let (($e4 (_ bv0 9)))
(let (($e5 (_ bv0 10)))
(let (($e6 (_ bv0 3)))
(let (($e7 (_ bv2 11)))
(let (($e8 (_ bv0 5)))
(let (($e9 (_ bv0 7)))
(let (($e10 (_ bv0 4)))
(let (($e19 (concat bvlambda_3_ bvlambda_4_)))
(let (($e20 (concat $e3 bvlambda_3_)))
(let (($e21 (concat $e20 bvlambda_4_)))
(let (($e22 (concat (bvnot $e3) bvlambda_3_)))
(let (($e23 (concat $e22 bvlambda_4_)))
(let (($e24 (ite (= #b1 bvlambda_3_) $e23 $e21)))
(let (($e25 (store a15 $e24 $e19)))
(let (($e26 (select $e25 $e7)))
(let (($e27 (concat $e9 $e26)))
(let (($e28 (concat (bvnot $e9) $e26)))
(let (($e29 ((_ extract 2 2) $e26)))
(let (($e30 (ite (= #b1 $e29) $e28 $e27)))
(let (($e31 (select a17 $e1)))
(let (($e32 ((_ extract 5 5) $e31)))
(let (($e33 (concat bvlambda_1_ bvlambda_1_)))
(let (($e34 (concat $e33 bvlambda_2_)))
(let (($e35 (store a17 bvlambda_3_ $e34)))
(let (($e36 (store $e35 (bvnot $e1) (bvnot $e5))))
(let (($e37 (store $e36 $e32 $e30)))
(let (($e38 (select $e37 (bvnot $e1))))
(let (($e39 (ite (= $e5 $e38) #b1 #b0)))
(let (($e40 (concat bvlambda_1_ bvlambda_2_)))
(let (($e41 (bvudiv $e2 $e40)))
(let (($e42 ((_ extract 2 2) $e41)))
(let (($e43 (select $e37 $e42)))
(let (($e44 (ite (= $e5 $e43) #b1 #b0)))
(let (($e45 (ite (= $e3 bvlambda_2_) #b1 #b0)))
(let (($e46 (bvand (bvnot bvlambda_1_) $e45)))
(let (($e47 (select a15 $e7)))
(let (($e48 (ite (= $e6 $e47) #b1 #b0)))
(let (($e49 (concat $e8 $e31)))
(let (($e50 (select a16 $e49)))
(let (($e51 (ite (= $e4 $e50) #b1 #b0)))
(let (($e52 (ite (= (bvnot $e4) $e50) #b1 #b0)))
(let (($e53 (select a18 (bvnot $e4))))
(let (($e54 (ite (= $e53 $e10) #b1 #b0)))
(let (($e55 (bvand (bvnot $e54) (bvnot $e52))))
(let (($e56 (bvand $e55 (bvnot $e51))))
(let (($e57 (bvand $e56 (bvnot $e48))))
(let (($e58 (bvand $e57 (bvnot $e46))))
(let (($e59 (bvand $e58 (bvnot $e44))))
(let (($e60 (bvand $e59 (bvnot $e39))))
 (not (= $e60 #b0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
